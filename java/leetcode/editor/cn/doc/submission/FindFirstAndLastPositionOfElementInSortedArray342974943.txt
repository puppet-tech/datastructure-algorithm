
    /**
     * @TimeComplexity
     * @SpaceComplexity
     * @Classification 算法
     * @Tag 二分查找、迭代
     */
    class Solution {
        public int[] searchRange(int[] nums, int target) {
            int left = 0, right = nums.length - 1;
            int[] ans = new int[]{-1, -1};
            while (left <= right) {
                int mid = left + ((right - left) >> 1);

                // 如果当前值等于 target，则进一步判断
                if (nums[mid] == target && (mid == 0 || nums[mid - 1] != target)) {
                    ans[0] = mid;
                    left = mid + 1;
                    continue;
                }
                if (nums[mid] == target && (mid == nums.length - 1 || nums[mid + 1] != target)) {
                    ans[1] = mid;
                    right = mid - 1;
                    continue;
                }

                if (nums[mid] > target) right = mid - 1;
                if (nums[mid] < target) left = mid + 1;
            }
            // 如果 target 在 nums 中只出现一次，则需要对结果进行修正
            if (ans[0] == -1 && ans[1] != -1) ans[0] = ans[1];
            if (ans[0] != -1 && ans[1] == -1) ans[1] = ans[0];
            return ans;
        }
    }

//runtime:N/A
//memory:N/A
//total_testcases:88
//total_correct:18
//input_formatted:[3,3,3]
3
//expected_output:[0,2]
//code_output:
//runtime_error:
//last_testcase:[3,3,3] 3


    /**
     * @TimeComplexity
     * @SpaceComplexity
     * @Classification 算法
     * @Tag 二分查找、迭代
     */
    class Solution {
        private int[] ans;

        public int[] searchRange(int[] nums, int target) {
            ans = new int[]{-1, -1};
            int left = 0, right = nums.length - 1;
            process(nums, left, right, target);
            return ans;
        }

        private void process(int[] nums, int left, int right, int target) {
            if (left > right) return;
            // 取中点
            int mid = left + ((right - left) >> 1);

            // 如果刚好等于 target，同时是数组的第一个元素或者前一个元素不相等时，说明是开始位置
            if (nums[mid] == target && (mid == 0 || nums[mid - 1] != target)) ans[0] = mid;
            
            // 如果刚好等于 target，同时是数组的最后一个元素或者后一个元素不相等时，说明是结束位置
            if (nums[mid] == target && (mid == nums.length - 1 || nums[mid + 1] != target)) ans[1] = mid;
            
            // 如果刚好等于 target，但处于中间位置例如 3 3 3 的中间，则
            if (nums[mid] == target && nums[mid - 1] == target && nums[mid + 1] == target) {
                process(nums, mid + 1, right, target);
                process(nums, left, mid - 1, target);
            }

            if (nums[mid] > target) process(nums, left, mid - 1, target);
            if (nums[mid] < target) process(nums, mid + 1, right, target);
        }

    }

//total_testcases:88
//total_correct:3
//input_formatted:[5,7,7,8,8,10]
8
//expected_output:[3,4]
//code_output:[-1,4]

1.完全二叉树每一层都是满的,不满的情况只有最后一层靠右的结点为空,可以看题目的图
2.那么怎么检验呢，可以用层序遍历,遍历每一层当遇到空结点的后再次遇到不为空的结点。则不是完全二叉树。
3.怎么记录有没有遇到空结点呢，可以定义一个布尔值，默认没有遇到为false，当遇到空结点时为true，如果还没有遍历完，继续遍历下去，当再次遇到结点不为空的情况，则可以判断不是完全二叉树。
4.有错误希望指出，部分注释在代码里面。

* 

```
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        Boolean isRirchNull=false;//定义一个布尔变量表示是否遇到空结点。
        Queue<TreeNode>queue=new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode cur=queue.poll();
            if(isRirchNull&&cur!=null){//当遇到第一个为空的结点而且再次遇到一个为空的结点时返回false,表示完全二叉树
                return false;
            }
            if(cur==null){//遇到第一个为空的结点，改变布尔值的变量
                isRirchNull=true;
                continue;//空结点没有左右子结点，不用执行下面的语句，直接跳出当前循环,进入下一次循环
            }
            queue.offer(cur.left);//这里不用判断当前结点的左右子节点是否为空。
            queue.offer(cur.right);//因为要记录是否遇到为空的结点，所以这里不管是空结点还是不为空结点都要加进去。
        }
        return true;//遍历完还没有再次遇到则是完全二叉树返回true.
    }
}
```


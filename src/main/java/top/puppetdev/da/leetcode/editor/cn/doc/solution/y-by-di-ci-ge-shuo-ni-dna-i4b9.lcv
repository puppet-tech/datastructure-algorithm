### 解题思路

感谢大佬林小鹿的无私分享~

两套模板，均5行:while mid yes no returnL
1. 均l<r，return l。只有while内有区别
2. [l,mid]: mid=(l+r)/2    r=mid  l=mid+1  右边界
3. [l,mid-1]: mid=(l+r+1)/2  l=mid  r=mid-1  左边界
4. [l,mid]“右左+[右]”:除了最后的l+1，其他没有+-1的操作。（-+lr-左）...
5. 一般就用2就够了，好写。这道题还需要使用3，依据2自己多推几遍应该就行了(?

* 

```
//模板1：[l,mid]
int bsearch(int l,int r){
    while(l<r){
        int mid=(l+r)/2;
        if(check(mid)) r=mid;
        else l=mid+1;
    }
    return l;
}

//模板2：[l,mid-1]
int bsearch(int l,int r){
    while(l<r){
        int mid=(l+r+1)/2;
        if(check(mid)) l=mid;
        else r=mid-1;
    }
    return l;
}
```

### 代码

* cpp

```cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return {-1,-1};

        //模板1
        int l = 0, r = nums.size() - 1; //二分范围
        while( l < r)			        //查找元素的开始位置
        {
            int mid = (l + r )/2;
            if(nums[mid] >= target) r = mid;
            else l = mid + 1;
        }
        if( nums[r] != target) return {-1,-1};  //查找失败
        int L = r;

        //模板2
        l = 0, r = nums.size() - 1;     //二分范围
        while( l < r)                   //查找元素的结束位置
        {
            int mid = (l + r + 1)/2;
            if(nums[mid] <= target ) l = mid;
            else r = mid - 1;
        }
        return {L,r};
    }
};

```

